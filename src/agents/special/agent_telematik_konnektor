#!/usr/bin/env python3
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# (c) Kleinrotti <kleinrotti@saltcloud.de>

# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

import argparse
import requests
import xml.etree.ElementTree as ET
import urllib3
import sys
import urllib3.exceptions


urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

cardsXML = """<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/">
    <SOAP-ENV:Header/>
    <SOAP-ENV:Body>
        <ns4:GetCards mandant-wide="%s" xmlns:ns2="http://ws.gematik.de/conn/ConnectorCommon/v5.0" xmlns:ns3="http://ws.gematik.de/tel/error/v2.0" xmlns:ns4="http://ws.gematik.de/conn/EventService/v7.2" xmlns:ns5="http://ws.gematik.de/conn/CardServiceCommon/v2.0" xmlns:ns6="http://ws.gematik.de/conn/CardService/v8.1" xmlns:ns7="http://ws.gematik.de/conn/ConnectorContext/v2.0" xmlns:ns8="http://ws.gematik.de/int/version/ProductInformation/v1.1" xmlns:ns9="http://ws.gematik.de/conn/CardTerminalInfo/v8.0">
            <ns7:Context>
                <ns2:MandantId>%s</ns2:MandantId>
                <ns2:ClientSystemId>%s</ns2:ClientSystemId>
                <ns2:WorkplaceId>%s</ns2:WorkplaceId>
            </ns7:Context>
        </ns4:GetCards>
    </SOAP-ENV:Body>
</SOAP-ENV:Envelope>"""

pinXML = """<?xml version="1.0" encoding="UTF-8"?>
<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <SOAP-ENV:Header/>
  <SOAP-ENV:Body>
    <GetPinStatus xmlns="http://ws.gematik.de/conn/CardService/v8.1">
      <Context xmlns="http://ws.gematik.de/conn/ConnectorContext/v2.0">
        <MandantId xmlns="http://ws.gematik.de/conn/ConnectorCommon/v5.0">%s</MandantId>
        <ClientSystemId xmlns="http://ws.gematik.de/conn/ConnectorCommon/v5.0">%s</ClientSystemId>
        <WorkplaceId xmlns="http://ws.gematik.de/conn/ConnectorCommon/v5.0">%s</WorkplaceId>
      </Context>
      <CardHandle xmlns="http://ws.gematik.de/conn/ConnectorCommon/v5.0">%s</CardHandle>
      <PinTyp xmlns="http://ws.gematik.de/conn/CardServiceCommon/v2.0">PIN.SMC</PinTyp>
    </GetPinStatus>
  </SOAP-ENV:Body>
</SOAP-ENV:Envelope>"""

card_terminalXML = """<?xml version="1.0" encoding="UtF-8"?>
<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <SOAP-ENV:Header/>
  <SOAP-ENV:Body>
    <GetCardTerminals xmlns="http://ws.gematik.de/conn/EventService/v7.2" mandant-wide="%s">
      <Context xmlns="http://ws.gematik.de/conn/ConnectorContext/v2.0">
        <MandantId xmlns="http://ws.gematik.de/conn/ConnectorCommon/v5.0">%s</MandantId>
        <ClientSystemId xmlns="http://ws.gematik.de/conn/ConnectorCommon/v5.0">%s</ClientSystemId>
        <WorkplaceId xmlns="http://ws.gematik.de/conn/ConnectorCommon/v5.0">%s</WorkplaceId>
        <UserId xmlns="http://ws.gematik.de/conn/ConnectorCommon/v5.0"/>
      </Context>
    </GetCardTerminals>
  </SOAP-ENV:Body>
</SOAP-ENV:Envelope>"""

operation_stateXML = """<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/">
    <SOAP-ENV:Header/>
    <SOAP-ENV:Body>
        <ns4:GetResourceInformation xmlns:ns2="http://ws.gematik.de/conn/ConnectorCommon/v5.0"
        xmlns:ns3="http://ws.gematik.de/tel/error/v2.0"
        xmlns:ns4="http://ws.gematik.de/conn/EventService/v7.2"
        xmlns:ns5="http://ws.gematik.de/conn/CardServiceCommon/v2.0"
        xmlns:ns6="http://ws.gematik.de/conn/CardService/v8.1"
        xmlns:ns7="http://ws.gematik.de/conn/ConnectorContext/v2.0"
        xmlns:ns8="http://ws.gematik.de/int/version/ProductInformation/v1.1"
        xmlns:ns9="http://ws.gematik.de/conn/CardTerminalInfo/v8.0">
            <ns7:Context>
                <ns2:MandantId>%s</ns2:MandantId>
                <ns2:ClientSystemId>%s</ns2:ClientSystemId>
                <ns2:WorkplaceId>%s</ns2:WorkplaceId>
            </ns7:Context>
        </ns4:GetResourceInformation>
    </SOAP-ENV:Body>
</SOAP-ENV:Envelope>"""


class SMCCard(object):
    def __init__(self):
        self.cardHandle = str()
        self.type = str()
        self.slot = str()
        self.insertTime = str()
        self.certificateExpiration = str()
        self.cardHolderName = str()
        self.Iccsn = str()
        self.pinStatus = str()


class Terminal(object):
    def __init__(self):
        self.name = str()
        self.ipv4Address = str()
        self.connected = str()
        self.slots = str()
        self.mac = str()
        self.productCode = str()
        self.vendor = str()
        self.productVersion = str()
        self.hwVersion = str()
        self.fwVersion = str()
        self.isPhysical = str()
        self.workplaceids = []


class OperationState(object):
    def __init__(self):
        self.condition = str()
        self.severity = str()
        self.type = str()
        self.value = str()
        self.validFrom = str()


class VPNState(object):
    def __init__(self):
        self.vpnType = str()
        self.status = str()


class Connector(object):
    def __init__(self):
        self.productTypeVersion = str()
        self.productName = str()
        self.productVendorName = str()
        self.tlsMandatory = str()
        self.clientAuthMandatory = ()
        self.hwVersion = str()
        self.fwVersion = str()


def requestConnector():
    """Request the connector.sds.

    Returns
    -------
    ``str``
        The http response text.
    """
    return requests.get(f"https://{host}:{port}/connector.sds", verify=verify_ssl,
                        cert=client_cert, auth=(username, password)).text


def requestCards():
    """Request SMC cards from remote card terminal connected to the konnektor.

    Returns
    -------
    ``str``
        The http response text.
    """
    body = cardsXML % (mandant_wide, mandant, clientsystem, workplace)
    return request(endpoint_url_eventservice, body)


def requestCardTerminal():
    """Request connected terminals from the Konnektor.

    Returns
    -------
    ``str``
        The http response text.
    """
    body = card_terminalXML % (mandant_wide, mandant, clientsystem, workplace)
    return request(endpoint_url_eventservice, body)


def requestPinStatus(cardHandle: str):
    """Request the SMC-B pin status from the Konnektor.

    Parameters
    ----------
    cardHandle : ``str``
        The cardHandle of the SMC-B card.

    Returns
    -------
    ``str``
        The http response text.
    """
    body = pinXML % (mandant, clientsystem, workplace, cardHandle)
    return request(endpoint_url_cardservice, body)


def requestConditionState():
    """Request conditions states from the Konnektor.

    Returns
    -------
    ``str``
        The http response text.
    """
    body = operation_stateXML % (mandant, clientsystem, workplace)
    return request(endpoint_url_eventservice, body)


def request(endpoint_url, data: str):
    """Base request function.

    Parameters
    ----------
    url : ``str``
        The destination URL.
    data : ``str``
        The body of the post request.

    Returns
    -------
    ``str``
        The http response text.
    """
    if debug is True:
        print(f"--------Debug request to {endpoint_url}--------\n" + data)
    try:
        response = requests.post(endpoint_url, headers={"Content-Type": "text/xml;charset=UTF-8"},
                                 data=data, verify=verify_ssl, cert=client_cert, auth=(username, password))
    except requests.ConnectionError:
        sys.exit("Connection refused by Konnektor. Check your ip/port configuration or firewall.")
    if response.status_code != 200:
        sys.exit(f"Got no response from Konnektor. Calling function: {sys._getframe(1).f_code.co_name}, "
                 f"HTTP code: {response.status_code}")
    if debug is True:
        print(f"--------Debug response from {endpoint_url}--------\n" + response.text)
    return response.text


def parseConnector(xmlString: str):
    """Parse the XML from the connector.sds response.

    Parameters
    ----------
    xmlString : ``str``
        The connector.sds xml string.

    Returns
    -------
    ``tuple[list[Connector], str, str]``
        A tuple with a list of connector objects, the EventService URL and CardService URL.
    """
    tree = ET.ElementTree(ET.fromstring(xmlString))
    root = tree.getroot()
    endpointEventService = None
    endpointCardService = None
    c = Connector()
    c.productTypeVersion = root.find(".//{http://ws.gematik.de/int/version/ProductInformation/v1.1}ProductTypeVersion").text
    c.clientAuthMandatory = root.find(".//{http://ws.gematik.de/conn/ServiceDirectory/v3.1}ClientAutMandatory").text
    c.fwVersion = root.find(".//{http://ws.gematik.de/int/version/ProductInformation/v1.1}FWVersion").text
    c.hwVersion = root.find(".//{http://ws.gematik.de/int/version/ProductInformation/v1.1}HWVersion").text
    c.productName = root.find(".//{http://ws.gematik.de/int/version/ProductInformation/v1.1}ProductName").text
    c.productVendorName = root.find(".//{http://ws.gematik.de/int/version/ProductInformation/v1.1}ProductVendorName").text
    c.tlsMandatory = root.find(".//{http://ws.gematik.de/conn/ServiceDirectory/v3.1}TLSMandatory").text
    for child in root.iter():
        if child.tag == "{http://ws.gematik.de/conn/ServiceInformation/v2.0}Service":
            if child.attrib["Name"] == "EventService":
                for child2 in child:
                    endpointEventService = child2.find(".//{http://ws.gematik.de/conn/ServiceInformation/v2.0}EndpointTLS")
                    if endpointEventService is not None:
                        endpointEventService = endpointEventService.attrib["Location"]
            if child.attrib["Name"] == "CardService":
                for child2 in child:
                    endpointCardService = child2.find(".//{http://ws.gematik.de/conn/ServiceInformation/v2.0}EndpointTLS")
                    if endpointCardService is not None:
                        endpointCardService = endpointCardService.attrib["Location"]
    return [c], endpointEventService, endpointCardService


def parseOperationState(xmlString: str):
    """Parse the XML from the operation state response to ``OperationState`` objects.

    Parameters
    ----------
    xmlString : ``str``
        The xml string you want to parse.

    Returns
    -------
    ``list[OperationState]``
        A list of OperationState objects.
    """
    lst = []
    tree = ET.ElementTree(ET.fromstring(xmlString))
    root = tree.getroot()
    for child in root.iter():
        if child.tag == "{http://ws.gematik.de/conn/ConnectorCommon/v5.0}Connector":
            for state in child.iter():
                if state.tag == "{http://ws.gematik.de/conn/ConnectorCommon/v5.0}OperatingState":
                    for errorState in state.iter():
                        if errorState.tag == "{http://ws.gematik.de/conn/ConnectorCommon/v5.0}ErrorState":
                            s = OperationState()
                            s.condition = errorState.find(
                                "{http://ws.gematik.de/conn/ConnectorCommon/v5.0}ErrorCondition").text
                            s.severity = errorState.find(
                                "{http://ws.gematik.de/conn/ConnectorCommon/v5.0}Severity").text
                            s.type = errorState.find(
                                "{http://ws.gematik.de/conn/ConnectorCommon/v5.0}Type").text
                            s.validFrom = errorState.find(
                                "{http://ws.gematik.de/conn/ConnectorCommon/v5.0}ValidFrom").text
                            s.value = errorState.find(
                                "{http://ws.gematik.de/conn/ConnectorCommon/v5.0}Value").text
                            lst.append(s)
    return lst


def parseVpnStatus(xmlString: str):
    """Parse the XML from the operation state response to ``VPNState`` objects.

    Parameters
    ----------
    xmlString : ``str``
        The xml string you want to parse.

    Returns
    -------
    ``list[VPNState]``
        A list of VPNState objects.
    """
    lst = []
    tree = ET.ElementTree(ET.fromstring(xmlString))
    root = tree.getroot()
    for child in root.iter():
        if child.tag == "{http://ws.gematik.de/conn/ConnectorCommon/v5.0}Connector":
            for vpnStatus in child.iter():
                v = VPNState()
                if vpnStatus.tag == "{http://ws.gematik.de/conn/ConnectorCommon/v5.0}VPNTIStatus":
                    v.status = vpnStatus.find(
                        "{http://ws.gematik.de/conn/ConnectorCommon/v5.0}ConnectionStatus").text
                    v.vpnType = vpnStatus.tag.split('}')[1]
                    lst.append(v)
                elif vpnStatus.tag == "{http://ws.gematik.de/conn/ConnectorCommon/v5.0}VPNSISStatus":
                    v.status = vpnStatus.find(
                        "{http://ws.gematik.de/conn/ConnectorCommon/v5.0}ConnectionStatus").text
                    v.vpnType = vpnStatus.tag.split('}')[1]
                    lst.append(v)
    return lst


def parseCards(xmlString):
    """Parse the XML from the cards response to ``SMCCard`` objects.

    Parameters
    ----------
    xmlString : ``str``
        The xml string you want to parse.

    Returns
    -------
    ``list[SMCCard]``
        A list of OperationState objects.
    """
    lst = []
    tree = ET.ElementTree(ET.fromstring(xmlString))
    root = tree.getroot()
    for child in root.iter():
        if child.tag == "{http://ws.gematik.de/conn/CardService/v8.1}Card":
            c = SMCCard()
            c.type = child.find(
                "{http://ws.gematik.de/conn/CardServiceCommon/v2.0}CardType").text
            c.cardHandle = child.find(
                "{http://ws.gematik.de/conn/ConnectorCommon/v5.0}CardHandle").text
            c.slot = child.find(
                "{http://ws.gematik.de/conn/CardServiceCommon/v2.0}SlotId").text
            c.insertTime = child.find(
                "{http://ws.gematik.de/conn/CardService/v8.1}InsertTime").text
            c.certificateExpiration = child.find(
                "{http://ws.gematik.de/conn/CardService/v8.1}CertificateExpirationDate").text
            c.cardHolderName = child.find(
                "{http://ws.gematik.de/conn/CardService/v8.1}CardHolderName").text
            c.Iccsn = child.find(
                "{http://ws.gematik.de/conn/CardServiceCommon/v2.0}Iccsn").text
            lst.append(c)
    return lst


def parseTerminal(xmlString: str):
    """Parse the XML from the terminal response to ``Terminal`` objects.

    Parameters
    ----------
    xmlString : ``str``
        The xml string you want to parse.

    Returns
    -------
    ``list[Terminal]``
        A list of Terminal objects.
    """
    tree = ET.ElementTree(ET.fromstring(xmlString))
    root = tree.getroot()
    lst = []
    for child in root.iter():
        if child.tag == "{http://ws.gematik.de/conn/CardTerminalInfo/v8.0}CardTerminal":
            t = Terminal()
            t.name = child.find(
                "{http://ws.gematik.de/conn/CardTerminalInfo/v8.0}Name").text
            t.slots = child.find(
                "{http://ws.gematik.de/conn/CardTerminalInfo/v8.0}Slots").text
            t.connected = child.find(
                "{http://ws.gematik.de/conn/CardTerminalInfo/v8.0}Connected").text
            t.isPhysical = child.find(
                "{http://ws.gematik.de/conn/CardTerminalInfo/v8.0}IS_PHYSICAL").text
            t.mac = child.find(
                "{http://ws.gematik.de/conn/CardTerminalInfo/v8.0}MacAddress").text
            ip = child.find(
                "{http://ws.gematik.de/conn/CardTerminalInfo/v8.0}IPAddress")
            t.ipv4Address = ip.find(
                "{http://ws.gematik.de/conn/CardTerminalInfo/v8.0}IPV4Address").text
            for child2 in child.iter():
                if child2.tag == "{http://ws.gematik.de/int/version/ProductInformation/v1.1}ProductInformation":
                    for productInfo in child2.iter():
                        if productInfo.tag == "{http://ws.gematik.de/int/version/ProductInformation/v1.1}ProductIdentification":
                            t.vendor = productInfo.find(
                                "{http://ws.gematik.de/int/version/ProductInformation/v1.1}ProductVendorID").text
                            t.productCode = productInfo.find(
                                "{http://ws.gematik.de/int/version/ProductInformation/v1.1}ProductCode").text
                        if productInfo.tag == "{http://ws.gematik.de/int/version/ProductInformation/v1.1}ProductVersion":
                            childVersion = productInfo.find(
                                "{http://ws.gematik.de/int/version/ProductInformation/v1.1}Local")
                            t.fwVersion = childVersion.find(
                                "{http://ws.gematik.de/int/version/ProductInformation/v1.1}FWVersion").text
                            t.hwVersion = childVersion.find(
                                "{http://ws.gematik.de/int/version/ProductInformation/v1.1}HWVersion").text
                        if productInfo.tag == "{http://ws.gematik.de/int/version/ProductInformation/v1.1}ProductTypeInformation":
                            t.productVersion = productInfo.find(
                                "{http://ws.gematik.de/int/version/ProductInformation/v1.1}ProductTypeVersion").text
                if child2.tag == "{http://ws.gematik.de/conn/ConnectorCommon/v5.0}WorkplaceId":
                    t.workplaceids.append(child2.text)
            lst.append(t)
    return lst


def parsePIN(xmlString: str):
    """Parse the XML from the pin response to a string.

    Parameters
    ----------
    xmlString : ``str``
        The xml string you want to parse.

    Returns
    -------
    ``str``
        The PIN status as string.
    """
    tree = ET.ElementTree(ET.fromstring(xmlString))
    root = tree.getroot()
    for child in root.iter():
        if child.tag == "{http://ws.gematik.de/conn/CardService/v8.1}GetPinStatusResponse":
            return child.find("{http://ws.gematik.de/conn/CardService/v8.1}PinStatus").text


def checkErrors(xmlString: str):
    """Check a xml string on error elements.
    If found, the program exits with error information.

    Parameters
    ----------
    xmlString : ``str``
        The xml string you want to check.
    """
    tree = ET.ElementTree(ET.fromstring(xmlString))
    root = tree.getroot()
    for child in root.iter():
        # if an error tag is found there is an error returned from the Konnektor
        if child.tag == "{http://ws.gematik.de/tel/error/v2.0}Error":
            faultstring = root.findall(
                ".//{http://ws.gematik.de/tel/error/v2.0}ErrorText")[0].text
            code = root.findall(
                ".//{http://ws.gematik.de/tel/error/v2.0}Code")[0].text
            sys.exit(
                f"The Konnektor returned an error. Code:{code} Message:{faultstring}")


def output(objects: list, sectionName: str):
    """Output checkmk data section
    """
    print(f"<<<{sectionName}:sep(124)>>>")
    for object in objects:
        lst = []
        for attribute, value in object.__dict__.items():
            # if value is a list it gets split into a single string seperated by a colon
            if isinstance(value, list):
                elements = ""
                for element in value:
                    elements += element + ';'
                lst.append(elements)
            elif value is not None:
                lst.append(value)
        print("|".join(lst))


def main(args):
    global verify_ssl, host, port, mandant, clientsystem, workplace, client_cert, debug
    global mandant_wide, endpoint_url_eventservice, endpoint_url_cardservice, username, password
    host = args.url
    mandant = args.mandant
    port = args.port
    clientsystem = args.clientsystem
    workplace = args.workplace
    debug = args.debug
    # mandant wide boolean value has to be lower case
    mandant_wide = str(args.mandant_wide).lower()
    verify_ssl = args.ssl_verify
    client_cert = (args.cert, args.certkey)
    username = args.username
    password = args.password
    connectorResponse = requestConnector()
    connector = parseConnector(connectorResponse)
    endpoint_url_eventservice = connector[1]
    endpoint_url_cardservice = connector[2]
    cardResponse = requestCards()
    checkErrors(cardResponse)

    cardReaderResponse = requestCardTerminal()
    checkErrors(cardReaderResponse)

    conditionResponse = requestConditionState()
    checkErrors(conditionResponse)
    cards = parseCards(cardResponse)

    for card in cards:
        # for smc-b cards PIN status gets checked additionally
        if card.type == "SMC-B":
            pinResponse = requestPinStatus(card.cardHandle)
            checkErrors(pinResponse)
            card.pinStatus = parsePIN(pinResponse)
        else:
            # set placeholder if no PIN status was checked
            card.pinStatus = "-"
    output(connector[0], "telematik_connector")
    output(cards, "telematik_card")
    output(parseTerminal(cardReaderResponse), "telematik_terminal")
    output(parseOperationState(conditionResponse), "telematik_operation")
    output(parseVpnStatus(conditionResponse), "telematik_vpn")


arg_parser = argparse.ArgumentParser()
arg_parser.add_argument(
    '-u', '--url', help="IP address or FQDN of the Konnektor", required=True
)
arg_parser.add_argument(
    '-p', '--port', help="Webinterface port", required=True
)
arg_parser.add_argument(
    '-m', '--mandant', help="Mandant ID", required=True
)
arg_parser.add_argument(
    '-c', '--clientsystem', help="Clientsystem ID", required=True
)
arg_parser.add_argument(
    '-w', '--workplace', help="Workplace ID", required=True
)
arg_parser.add_argument(
    '--ssl_verify', help="Enable ssl verification.", action='store_true'
)
arg_parser.add_argument(
    '-cert', help="Path to the client certificate, only needed if Konnektor requires client authentication.", default=None
)
arg_parser.add_argument(
    '-certkey', help="Path to the client certificate key (unencrypted), only needed if Konnektor requires client authentication.", default=None
)
arg_parser.add_argument(
    '-username', help="Username for http basic authentication, only needed if Konnektor requires client authentication.", default=None
)
arg_parser.add_argument(
    '-password', help="Password for http basic authentication, only needed if Konnektor requires client authentication.", default=None
)
arg_parser.add_argument(
    '--debug', help="Enable debugging which outputs the received xml responses", action='store_true'
)
arg_parser.add_argument(
    '--mandant_wide', help="Enable mandant wide terminals and cards.", action='store_true'
)
args = arg_parser.parse_args()
main(args)
